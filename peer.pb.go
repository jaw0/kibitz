// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peer.proto

package kibitz

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NetInfo struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Natdom               string   `protobuf:"bytes,2,opt,name=natdom,proto3" json:"natdom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetInfo) Reset()         { *m = NetInfo{} }
func (m *NetInfo) String() string { return proto.CompactTextString(m) }
func (*NetInfo) ProtoMessage()    {}
func (*NetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_peer_330eea082c9f36ee, []int{0}
}
func (m *NetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetInfo.Merge(dst, src)
}
func (m *NetInfo) XXX_Size() int {
	return m.Size()
}
func (m *NetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NetInfo proto.InternalMessageInfo

func (m *NetInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NetInfo) GetNatdom() string {
	if m != nil {
		return m.Natdom
	}
	return ""
}

type PeerInfo struct {
	StatusCode  int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Subsystem   string `protobuf:"bytes,2,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	ServerId    string `protobuf:"bytes,4,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Hostname    string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Datacenter  string `protobuf:"bytes,6,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	Rack        string `protobuf:"bytes,7,opt,name=rack,proto3" json:"rack,omitempty"`
	// lamport clocks (see lamport.go)
	TimeChecked          uint64     `protobuf:"varint,8,opt,name=time_checked,json=timeChecked,proto3" json:"time_checked,omitempty"`
	TimeUp               uint64     `protobuf:"varint,9,opt,name=time_up,json=timeUp,proto3" json:"time_up,omitempty"`
	TimeCreated          uint64     `protobuf:"varint,10,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	TimeConf             uint64     `protobuf:"varint,11,opt,name=time_conf,json=timeConf,proto3" json:"time_conf,omitempty"`
	Via                  string     `protobuf:"bytes,17,opt,name=via,proto3" json:"via,omitempty"`
	NetInfo              []*NetInfo `protobuf:"bytes,20,rep,name=net_info,json=netInfo" json:"net_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PeerInfo) Reset()         { *m = PeerInfo{} }
func (m *PeerInfo) String() string { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()    {}
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_peer_330eea082c9f36ee, []int{1}
}
func (m *PeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerInfo.Merge(dst, src)
}
func (m *PeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PeerInfo proto.InternalMessageInfo

func (m *PeerInfo) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *PeerInfo) GetSubsystem() string {
	if m != nil {
		return m.Subsystem
	}
	return ""
}

func (m *PeerInfo) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *PeerInfo) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *PeerInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PeerInfo) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

func (m *PeerInfo) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *PeerInfo) GetTimeChecked() uint64 {
	if m != nil {
		return m.TimeChecked
	}
	return 0
}

func (m *PeerInfo) GetTimeUp() uint64 {
	if m != nil {
		return m.TimeUp
	}
	return 0
}

func (m *PeerInfo) GetTimeCreated() uint64 {
	if m != nil {
		return m.TimeCreated
	}
	return 0
}

func (m *PeerInfo) GetTimeConf() uint64 {
	if m != nil {
		return m.TimeConf
	}
	return 0
}

func (m *PeerInfo) GetVia() string {
	if m != nil {
		return m.Via
	}
	return ""
}

func (m *PeerInfo) GetNetInfo() []*NetInfo {
	if m != nil {
		return m.NetInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*NetInfo)(nil), "kibitz.NetInfo")
	proto.RegisterType((*PeerInfo)(nil), "kibitz.PeerInfo")
}
func (m *NetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPeer(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if len(m.Natdom) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPeer(dAtA, i, uint64(len(m.Natdom)))
		i += copy(dAtA[i:], m.Natdom)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPeer(dAtA, i, uint64(m.StatusCode))
	}
	if len(m.Subsystem) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPeer(dAtA, i, uint64(len(m.Subsystem)))
		i += copy(dAtA[i:], m.Subsystem)
	}
	if len(m.Environment) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPeer(dAtA, i, uint64(len(m.Environment)))
		i += copy(dAtA[i:], m.Environment)
	}
	if len(m.ServerId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPeer(dAtA, i, uint64(len(m.ServerId)))
		i += copy(dAtA[i:], m.ServerId)
	}
	if len(m.Hostname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPeer(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.Datacenter) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPeer(dAtA, i, uint64(len(m.Datacenter)))
		i += copy(dAtA[i:], m.Datacenter)
	}
	if len(m.Rack) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPeer(dAtA, i, uint64(len(m.Rack)))
		i += copy(dAtA[i:], m.Rack)
	}
	if m.TimeChecked != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPeer(dAtA, i, uint64(m.TimeChecked))
	}
	if m.TimeUp != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPeer(dAtA, i, uint64(m.TimeUp))
	}
	if m.TimeCreated != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPeer(dAtA, i, uint64(m.TimeCreated))
	}
	if m.TimeConf != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPeer(dAtA, i, uint64(m.TimeConf))
	}
	if len(m.Via) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPeer(dAtA, i, uint64(len(m.Via)))
		i += copy(dAtA[i:], m.Via)
	}
	if len(m.NetInfo) > 0 {
		for _, msg := range m.NetInfo {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintPeer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPeer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	l = len(m.Natdom)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusCode != 0 {
		n += 1 + sovPeer(uint64(m.StatusCode))
	}
	l = len(m.Subsystem)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	l = len(m.Datacenter)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	l = len(m.Rack)
	if l > 0 {
		n += 1 + l + sovPeer(uint64(l))
	}
	if m.TimeChecked != 0 {
		n += 1 + sovPeer(uint64(m.TimeChecked))
	}
	if m.TimeUp != 0 {
		n += 1 + sovPeer(uint64(m.TimeUp))
	}
	if m.TimeCreated != 0 {
		n += 1 + sovPeer(uint64(m.TimeCreated))
	}
	if m.TimeConf != 0 {
		n += 1 + sovPeer(uint64(m.TimeConf))
	}
	l = len(m.Via)
	if l > 0 {
		n += 2 + l + sovPeer(uint64(l))
	}
	if len(m.NetInfo) > 0 {
		for _, e := range m.NetInfo {
			l = e.Size()
			n += 2 + l + sovPeer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPeer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPeer(x uint64) (n int) {
	return sovPeer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Natdom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Natdom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subsystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datacenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datacenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeChecked", wireType)
			}
			m.TimeChecked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeChecked |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeUp", wireType)
			}
			m.TimeUp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeUp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			m.TimeCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeCreated |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeConf", wireType)
			}
			m.TimeConf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeConf |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Via", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Via = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetInfo = append(m.NetInfo, &NetInfo{})
			if err := m.NetInfo[len(m.NetInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPeer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPeer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPeer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPeer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPeer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPeer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPeer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("peer.proto", fileDescriptor_peer_330eea082c9f36ee) }

var fileDescriptor_peer_330eea082c9f36ee = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0x6f, 0x6e, 0xda, 0xfc, 0x39, 0xb9, 0x70, 0xeb, 0x20, 0x3a, 0xa8, 0xc4, 0xd8, 0x55,
	0x71, 0xd1, 0x85, 0xe2, 0x0b, 0xd8, 0x55, 0x37, 0x22, 0x01, 0xd7, 0x61, 0x9a, 0x39, 0xa1, 0xa1,
	0x64, 0x26, 0x4c, 0x4e, 0x0b, 0xfa, 0x18, 0xae, 0x7c, 0x24, 0x97, 0x3e, 0x82, 0xd4, 0x17, 0x91,
	0xcc, 0xb4, 0xb4, 0xbb, 0xef, 0xfc, 0x7e, 0xf3, 0x85, 0x1c, 0x0e, 0x40, 0x8b, 0x68, 0xa6, 0xad,
	0xd1, 0xa4, 0x59, 0xb0, 0xaa, 0x17, 0x35, 0xbd, 0x8d, 0x1f, 0x20, 0x7c, 0x42, 0x9a, 0xab, 0x4a,
	0x33, 0x06, 0x03, 0x21, 0xa5, 0xe1, 0x5e, 0xe6, 0x4d, 0xe2, 0xdc, 0x66, 0x76, 0x06, 0x81, 0x12,
	0x24, 0x75, 0xc3, 0xff, 0x5a, 0xba, 0x9b, 0xc6, 0xef, 0x3e, 0x44, 0xcf, 0x88, 0xc6, 0x16, 0xaf,
	0x21, 0xe9, 0x48, 0xd0, 0xba, 0x2b, 0x4a, 0x2d, 0xd1, 0xf6, 0x87, 0x39, 0x38, 0x34, 0xd3, 0x12,
	0xd9, 0x15, 0xc4, 0xdd, 0x7a, 0xd1, 0xbd, 0x76, 0x84, 0xfb, 0x0f, 0x1d, 0x00, 0xcb, 0x20, 0x41,
	0xb5, 0xa9, 0x8d, 0x56, 0x0d, 0x2a, 0xe2, 0xbe, 0xf5, 0xc7, 0x88, 0x5d, 0x42, 0xdc, 0xa1, 0xd9,
	0xa0, 0x29, 0x6a, 0xc9, 0x07, 0xd6, 0x47, 0x0e, 0xcc, 0x25, 0xbb, 0x80, 0x68, 0xa9, 0x3b, 0x52,
	0xa2, 0x41, 0x3e, 0x74, 0x6e, 0x3f, 0xb3, 0x14, 0x40, 0x0a, 0x12, 0x25, 0x2a, 0x42, 0xc3, 0x03,
	0x6b, 0x8f, 0x48, 0xbf, 0xb2, 0x11, 0xe5, 0x8a, 0x87, 0x6e, 0xe5, 0x3e, 0xb3, 0x1b, 0xf8, 0x47,
	0x75, 0x83, 0x45, 0xb9, 0xc4, 0x72, 0x85, 0x92, 0x47, 0x99, 0x37, 0x19, 0xe4, 0x49, 0xcf, 0x66,
	0x0e, 0xb1, 0x73, 0x08, 0xed, 0x93, 0x75, 0xcb, 0x63, 0x6b, 0x83, 0x7e, 0x7c, 0x69, 0x0f, 0x5d,
	0x83, 0x82, 0x50, 0x72, 0x38, 0xea, 0x3a, 0xd4, 0xef, 0xe2, 0x9e, 0x68, 0x55, 0xf1, 0xc4, 0xfa,
	0xc8, 0x7a, 0xad, 0x2a, 0x36, 0x02, 0x7f, 0x53, 0x0b, 0x7e, 0x62, 0x7f, 0xa7, 0x8f, 0xec, 0x16,
	0x22, 0x85, 0x54, 0xd4, 0xaa, 0xd2, 0xfc, 0x34, 0xf3, 0x27, 0xc9, 0xdd, 0xff, 0xa9, 0x3b, 0xdd,
	0x74, 0x77, 0xb7, 0x3c, 0x54, 0x2e, 0x3c, 0x8e, 0x3e, 0xb7, 0xa9, 0xf7, 0xb5, 0x4d, 0xbd, 0xef,
	0x6d, 0xea, 0x7d, 0xfc, 0xa4, 0x7f, 0x16, 0x81, 0x3d, 0xf6, 0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x03, 0xb7, 0x7f, 0x67, 0xfa, 0x01, 0x00, 0x00,
}
